@model LoginAPI.Models.Lead

@{
    ViewBag.Title = "NewPage";
}


<h2>NewPage</h2>







<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <style>
        * {
            box-sizing: border-box;
        }

        input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        label {
            padding: 12px 12px 12px 0;
            display: inline-block;
            margin-left: 50px;
            font-size: 15px
        }

        input[type=submit] {
            background-color: #04AA6D;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            float: right;
        }

            input[type=submit]:hover {
                background-color: #45a049;
            }

        .container {
            border-radius: 5px;
            background-color: #f2f2f2;
            padding: 20px;
            margin-top: 30px
        }

        .col-25 {
            width: 25%;
            margin-top: 6px;
        }

        .col-75 {
            width: 75%;
            margin-top: 6px;
        }
    </style>
</head>
<body>



    <div class="container">
        <h2 style="color: orangered; margin-left: 40px;">Edit details</h2>

        @using (Html.BeginForm("UpdateCustomer", "Leads", FormMethod.Post))
        {
            @Html.HiddenFor(model => model.Id)
            <div class="row">
                <div class="col-25 ">
                    <label for="fname">Name</label>
                </div>
                <div class="col-75 ">
                    <input onkeypress="return Validatelname(event)" id="Errorlname" @Html.EditorFor(model => model.Name)
                </div>
            </div>
            <div class="row">
                <div class="col-25">
                    <label for="lname">Project Name</label>
                </div>
                <div class="col-75">
                    <input onkeypress="return Validateproject(event)" id="Errorproject" @Html.EditorFor(model => model.Project_Name)
                </div>
            </div>
            <div class="row">
                <div class="col-25">
                    <label for="lname">Status</label>
                </div>
                <div class="col-75">
                    <input onkeypress="return Validatelname(event)" id="Errorlname" @Html.EditorFor(model => model.Status)
                </div>
            </div>
            <div class="row">
                <div class="col-25">
                    <label for="lname">Added</label>
                </div>
                <div class="col-75">
                    <input onkeypress="return Validatelname(event)" id="Errorlname" @Html.EditorFor(model => model.Added)

                </div>
            </div>

            <div class="row">
                <div class="col-25 ">
                    <label for="lname">Type</label>
                </div>
                <div class="col-75">
                    <input onkeypress="return Validatelname(event)" id="Errorlname" @Html.EditorFor(model => model.Type)

                </div>
            </div>
            <div class="row">
                <div class="col-25">
                    <label for="lname">Contact</label>
                </div>
                <div class="col-75">
                    @Html.EditorFor(model => model.Contact)

                </div>
            </div>
            <div class="row">
                <div class="col-25 ">
                    <label for="lname">Action</label>
                </div>
                <div class="col-75">
                    <input onkeypress="return Validatelname(event)" id="Errorlname" @Html.EditorFor(model => model.Action)

                </div>
            </div>
            <div class="row">
                <div class="col-25">
                    <label for="lname">Assignee</label>
                </div>
                <div class="col-75">
                    @Html.EditorFor(model => model.Assignee)

                </div>
            </div>
            <div class="row">
                <div class="col-25 ">
                    <label for="lname">Bid Date</label>
                </div>
                <div class="col-75">
                    @Html.EditorFor(model => model.Bid_Date)
                </div>
            </div>

            <div class="row">
                <input type="submit" value="Save">
            </div>
        }
    </div>
    
    <script>
        function Validatelname(e) {
            var keyCode = e.keyCode || e.which;
            var errorMsg = document.getElementById("Errorlname");
            errorMsg.innerHTML = ""; //Regex to allow only Alphabets Numbers Dash Underscore and Space
            var pattern = /^[A-Za-z]/i; //Validating the textBox value against our regex pattern.
            var isValid = pattern.test(String.fromCharCode(keyCode));
            if (!isValid) {
                errorMsg.innerHTML = "Invalid Attempt, only alphabets allowed";
            } return isValid;
        }
        function Validateproject(e) {
            var keyCode = e.keyCode || e.which;
            var errorMsg = document.getElementById("Errorproject");
            errorMsg.innerHTML = ""; //Regex to allow only Alphabets Numbers Dash Underscore and Space
            var pattern = /^[A-Za-z0-9]/i; //Validating the textBox value against our regex pattern.
            var isValid = pattern.test(String.fromCharCode(keyCode));
            if (!isValid) {
                errorMsg.innerHTML = "Invalid Attempt, only alphabets allowed";
            }
            return isValid;
        }

        </script>


</body >
</html >

